     

import numpy as np
import random

def neighbor(maze, row, column, maxdim):
    open_neighbors = []
    if row+1 < maxdim and (maze[row+1, column] == 'o' or maze[row+1, column] == 'E'):
        open_neighbors.append((row+1, column))

    if row-1 >=0 and (maze[row-1, column] == 'o' or maze[row-1, column] == 'E'):
        open_neighbors.append((row-1, column))

    if column+1<maxdim and (maze[row, column + 1] == 'o' or maze[row, column + 1] == 'E'):
        open_neighbors.append((row, column+1))

    if column-1 >=0 and (maze[row, column - 1] == 'o' or maze[row, column - 1] == 'E'):
        open_neighbors.append((row, column-1))

    if open_neighbors:
        print "neighbor function print statement: True"
        return True, open_neighbors

    print "neighbor function print statement: False"
    return False, None




def generate_a_maze(dimension, maze_grid = None, start_row = None, start_column = None, end_row = None, end_column = None, backtracking_list = [], dead_end_list = []):

    # initial setup of maze shell, put into different function once this one works properly
    if maze_grid is None:
        maze_grid = np.chararray((dimension, dimension))
        maze_grid[:] = 'o'
        maze_grid[0, random.randint(0, dimension - 1)] = 'E'
        maze_grid[dimension - 1, random.randint(0, dimension - 1)] = 'S'
        start_row, start_column = np.where(maze_grid == 'S')
        start_row, start_column = (int(start_row[0]), int(start_column[0]))
        end_row, end_column = np.where(maze_grid == 'E')
        end_row, end_column = (int(end_row[0]), int(end_column[0]))
    print maze_grid
    # termination condition
    #     possibility 1
    if 'o' not in maze_grid:
        # all cells should be visited
        return maze_grid

    neighbor_available, open_neighbors = neighbor(maze_grid, start_row, start_column, dimension-1)

    print "open neighbors", open_neighbors
    if neighbor_available:
        backtracking_list.append((start_row, start_column))
        new_row, new_column = random.choice(open_neighbors)

        print "new row", new_row
        print  "new column", new_column

        maze_grid[start_row, start_column] = '.'  # mark as visited
        print
        print
#             maybe put end row and maze shell making steps in separate functions like in recursive maze solver?
        print "latest backtracking location at current level", backtracking_list[-1]
        print
        print "dimension", dimension
        print "row", new_row
        print "column", new_column
        print "end", end_row, end_column
        print "backtracking list", backtracking_list
        solution = generate_a_maze(dimension, maze_grid = maze_grid, start_row=new_row, start_column=new_column,end_row=end_row, end_column=end_column, backtracking_list=backtracking_list, dead_end_list=dead_end_list)
        # print "solved", solved
        print "solution"
        print solution
        if solution is not None:
            return maze_grid

        print
        # if solved:
        #         return True, solution
        # else:
        #     # # dead_end_list.append((start_row, start_column))
        #     # return False, None
    else:
        dead_end_list.append((start_row,start_column))
        print "dead end list", dead_end_list
        print backtracking_list

        for i, j in backtracking_list[::-1]:
            print "row", i
            print "column", j
            print maze_grid
            print
            print
            maze_grid[i,j] = 'o'
            dead_end_list.append((i,j))
            neighbor_available, open_neighbors = neighbor(maze_grid, i, j, dimension-1)
            print "neighbor function return value:", neighbor_available
            print "open neighbors", open_neighbors
            print neighbor_available
            if open_neighbors == None:
                backtracking_list.remove((i, j))
                print "continuing for loop"
                continue

            print "first open position in backtracking_list", i, j
            print open_neighbors
            print
            print
            start_row, start_column = i, j
            break


        print maze_grid
        return maze_grid
generate_a_maze(5)

# if (start_row, start_column) in backtracking_list:
        #     backtracking_list.remove((start_row, start_column))
        # start_row, start_column = backtracking_list.pop()
        # print backtracking_list
        # print "reached a dead end, new starting position is", start_row, start_column
        #
        # print
        # # generate_a_maze(dimension, maze_grid=maze_grid, start_row=start_row, start_column=start_column, end_row=end_row,
        # #                 end_column=end_column, backtracking_list=backtracking_list, dead_end_list=dead_end_list)
        # return False, maze_grid_backtrack # ignore that entire branch
